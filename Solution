class Solution {
    public int reversePairs(int[] nums) {
     return merges(nums,0,nums.length-1);
    }
    public int merges(int[] nums,int low,int high){
        if(low>=high)return 0;
        int mid=low+(high-low)/2;
        int tot=merges(nums,low,mid);
        tot+=merges(nums,mid+1,high);
        tot+=fmerge(nums,low,mid,high);
        return tot;
    }
    public int fmerge(int[] nums,int low,int mid,int high){
        int count=0;
        int t=mid+1;
        for(int i=low;i<=mid;i++){
            while(t<=high && (long)nums[i]>2*(long)nums[t])
                t++;
            count+=t-(mid+1);
        }
        ArrayList<Integer> arl=new ArrayList();
        int left=low;int right=mid+1;
        while(left<=mid && right<=high){
            if(nums[left]<=nums[right])
                arl.add(nums[left++]);
            else
            arl.add(nums[right++]);
        }
        while(left<=mid){
             arl.add(nums[left++]);
             }
        while(right<=high)
             arl.add(nums[right++]);
           for(int i=low;i<=high;i++){
             nums[i]=arl.get(i-low);
           }
         return count;
}}

//Time Complexity -O(NlogN)
// Space Complexity - O(N)
